muks2 = this.physics.add.group();

            muk2Count = 24;

            this.physics.add.collider(muks2, platforms);
            this.physics.add.collider(player, muks2, hitMuk2, null, this);

            function hitMuk2(player, muks2) {
                player.setTint(0xff0000);
                player.anims.play("turn");
                this.time.addEvent({
                    delay: 500,
                    loop: false,
                    callback: () => {
                        life--;
                        lifeText.setText("Hearts: " + life);
                        if (life <= 0) {
                            this.scene.start("Death");
                            localStorage.setItem("Health", 3);
                        }
                        this.time.addEvent({
                            delay: 500,
                            loop: false,
                            callback: () => {
                                player.clearTint();
                            }
                        });
                    }
                })
            }
            //muk1 - 1-5 row 1, 6-10 row 2, 11-15 row 3, 16-20 row 4, 21-25 row 5
            /*{
                muk1 = muks.create(Phaser.Math.Between(100, 700), Phaser.Math.Between(100, 550), 'muk');
                muk1.setBounce(1);
                muk1.setCollideWorldBounds(false);
                muk1.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }*/
            //muk2
            {
                var muk2 = muks2.create(Phaser.Math.Between(100, 700), Phaser.Math.Between(700, 1250), 'muk2');
                muk2.setBounce(1);
                muk2.setCollideWorldBounds(false);
                muk2.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk3
            {
                var muk3 = muks2.create(Phaser.Math.Between(100, 700), Phaser.Math.Between(1400, 1950), 'muk2');
                muk3.setBounce(1);
                muk3.setCollideWorldBounds(false);
                muk3.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk4
            {
                var muk4 = muks2.create(Phaser.Math.Between(100, 700), Phaser.Math.Between(2100, 2650), 'muk2');
                muk4.setBounce(1);
                muk4.setCollideWorldBounds(false);
                muk4.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk5
            {
                var muk5 = muks2.create(Phaser.Math.Between(100, 700), Phaser.Math.Between(2800, 3350), 'muk2');
                muk5.setBounce(1);
                muk5.setCollideWorldBounds(false);
                muk5.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk6 - middle 1
            {
                var muk6 = muks2.create(Phaser.Math.Between(800, 1500), Phaser.Math.Between(100, 550), 'muk2');
                muk6.setBounce(1);
                muk6.setCollideWorldBounds(false);
                muk6.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk7
            {
                var muk7 = muks2.create(Phaser.Math.Between(800, 1500), Phaser.Math.Between(700, 1250), 'muk2');
                muk7.setBounce(1);
                muk7.setCollideWorldBounds(false);
                muk7.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk8
            {
                var muk8 = muks2.create(Phaser.Math.Between(800, 1500), Phaser.Math.Between(1400, 1950), 'muk2');
                muk8.setBounce(1);
                muk8.setCollideWorldBounds(false);
                muk8.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk9
            {
                var muk9 = muks2.create(Phaser.Math.Between(800, 1500), Phaser.Math.Between(2100, 2650), 'muk2');
                muk9.setBounce(1);
                muk9.setCollideWorldBounds(false);
                muk9.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk10
            {
                var muk10 = muks2.create(Phaser.Math.Between(800, 1500), Phaser.Math.Between(2100, 2650), 'muk2');
                muk10.setBounce(1);
                muk10.setCollideWorldBounds(false);
                muk10.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk11 - middle 2
            {
                var muk11 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(100, 550), 'muk2');
                muk11.setBounce(1);
                muk11.setCollideWorldBounds(false);
                muk11.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk12
            {
                var muk12 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(700, 1250), 'muk2');
                muk12.setBounce(1);
                muk12.setCollideWorldBounds(false);
                muk12.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk13
            {
                var muk13 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(1400, 1950), 'muk2');
                muk13.setBounce(1);
                muk13.setCollideWorldBounds(false);
                muk13.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk14
            {
                var muk14 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(2100, 2650), 'muk2');
                muk14.setBounce(1);
                muk14.setCollideWorldBounds(false);
                muk14.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk15
            {
                var muk15 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(2100, 2650), 'muk2');
                muk15.setBounce(1);
                muk15.setCollideWorldBounds(false);
                muk15.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk16 - middle 3
            {
                var muk16 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(100, 550), 'muk2');
                muk16.setBounce(1);
                muk16.setCollideWorldBounds(false);
                muk16.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk17
            {
                var muk17 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(700, 1250), 'muk2');
                muk17.setBounce(1);
                muk17.setCollideWorldBounds(false);
                muk17.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk18
            {
                var muk18 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(1400, 1950), 'muk2');
                muk18.setBounce(1);
                muk18.setCollideWorldBounds(false);
                muk18.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk19
            {
                var muk19 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(2100, 2650), 'muk2');
                muk19.setBounce(1);
                muk19.setCollideWorldBounds(false);
                muk19.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk20
            {
                var muk20 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(2100, 2650), 'muk2');
                muk20.setBounce(1);
                muk20.setCollideWorldBounds(false);
                muk20.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk21 - left
            {
                var muk21 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(100, 550), 'muk2');
                muk21.setBounce(1);
                muk21.setCollideWorldBounds(false);
                muk21.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk22
            {
                var muk22 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(700, 1250), 'muk2');
                muk22.setBounce(1);
                muk22.setCollideWorldBounds(false);
                muk22.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk23
            {
                var muk23 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(1400, 1950), 'muk2');
                muk23.setBounce(1);
                muk23.setCollideWorldBounds(false);
                muk23.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk24
            {
                var muk24 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(2100, 2650), 'muk2');
                muk24.setBounce(1);
                muk24.setCollideWorldBounds(false);
                muk24.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }
            //muk25
            {
                var muk25 = muks2.create(Phaser.Math.Between(1600, 2300), Phaser.Math.Between(2100, 2650), 'muk2');
                muk25.setBounce(1);
                muk25.setCollideWorldBounds(false);
                muk25.setVelocity(Phaser.Math.Between(-200, 200), Phaser.Math.Between(-200, 200));
            }

        }
        //attack code
        {
            x = player.body.position.x;
            y = player.body.position.y;

            attack = this.physics.add.group();

            attack1 = attack.create(x + 20, y + 10, "bomb").setScale(2.5);
            attack1.visible = false;
        }
        //collision of attacks and muks
        {
            //look back at bomb creating functions for how this was done idk why it isn't creating a collider
            //bomb function doesn't help this is exactly the same
            this.physics.add.collider(muks2, attack, attackMuks2, null, this);
            attack1.body.enable = false;

            function attackMuks2(muk, attack) {
                muk.setTint(0xff0000);
                attack.setTint(0xff0000);
                this.time.addEvent({
                    delay: 100,
                    callback: () => {
                        muk.destroy();
                        attack.clearTint();
                    }
                });
                muks2Count--;
                attack.setVelocity(0, 0);
                //muk count = 0 -> scene transition

                if (muks2Count == 0) {
                    this.scene.start("Boss");
                }
            }
        }
    },
